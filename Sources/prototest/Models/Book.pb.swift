// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Book.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Book {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var publishDateTime: Int64 {
    get {return _publishDateTime ?? 0}
    set {_publishDateTime = newValue}
  }
  /// Returns true if `publishDateTime` has been explicitly set.
  var hasPublishDateTime: Bool {return self._publishDateTime != nil}
  /// Clears the value of `publishDateTime`. Subsequent reads from it will return its default value.
  mutating func clearPublishDateTime() {self._publishDateTime = nil}

  var awards: [Award] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _title: String? = nil
  fileprivate var _publishDateTime: Int64? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Book: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Book: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Book"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "publishDateTime"),
    3: .same(proto: "awards"),
  ]

  public var isInitialized: Bool {
    if self._title == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.awards) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self._publishDateTime) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.awards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._publishDateTime {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    } }()
    if !self.awards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.awards, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Book, rhs: Book) -> Bool {
    if lhs._title != rhs._title {return false}
    if lhs._publishDateTime != rhs._publishDateTime {return false}
    if lhs.awards != rhs.awards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
