// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: StartFlow.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct StartFlow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appointmentType: String {
    get {return _appointmentType ?? String()}
    set {_appointmentType = newValue}
  }
  /// Returns true if `appointmentType` has been explicitly set.
  var hasAppointmentType: Bool {return self._appointmentType != nil}
  /// Clears the value of `appointmentType`. Subsequent reads from it will return its default value.
  mutating func clearAppointmentType() {self._appointmentType = nil}

  var componentName: String {
    get {return _componentName ?? String()}
    set {_componentName = newValue}
  }
  /// Returns true if `componentName` has been explicitly set.
  var hasComponentName: Bool {return self._componentName != nil}
  /// Clears the value of `componentName`. Subsequent reads from it will return its default value.
  mutating func clearComponentName() {self._componentName = nil}

  var itemIndex: Int32 {
    get {return _itemIndex ?? 0}
    set {_itemIndex = newValue}
  }
  /// Returns true if `itemIndex` has been explicitly set.
  var hasItemIndex: Bool {return self._itemIndex != nil}
  /// Clears the value of `itemIndex`. Subsequent reads from it will return its default value.
  mutating func clearItemIndex() {self._itemIndex = nil}

  var scenarioName: String {
    get {return _scenarioName ?? "start-flow"}
    set {_scenarioName = newValue}
  }
  /// Returns true if `scenarioName` has been explicitly set.
  var hasScenarioName: Bool {return self._scenarioName != nil}
  /// Clears the value of `scenarioName`. Subsequent reads from it will return its default value.
  mutating func clearScenarioName() {self._scenarioName = nil}

  var schemaVersion: String {
    get {return _schemaVersion ?? "1.3.1"}
    set {_schemaVersion = newValue}
  }
  /// Returns true if `schemaVersion` has been explicitly set.
  var hasSchemaVersion: Bool {return self._schemaVersion != nil}
  /// Clears the value of `schemaVersion`. Subsequent reads from it will return its default value.
  mutating func clearSchemaVersion() {self._schemaVersion = nil}

  var phoneNumberExists: StartFlow.PHONENUMBEREXISTS {
    get {return _phoneNumberExists ?? .verified}
    set {_phoneNumberExists = newValue}
  }
  /// Returns true if `phoneNumberExists` has been explicitly set.
  var hasPhoneNumberExists: Bool {return self._phoneNumberExists != nil}
  /// Clears the value of `phoneNumberExists`. Subsequent reads from it will return its default value.
  mutating func clearPhoneNumberExists() {self._phoneNumberExists = nil}

  var paypalAvailable: Int32 {
    get {return _paypalAvailable ?? 0}
    set {_paypalAvailable = newValue}
  }
  /// Returns true if `paypalAvailable` has been explicitly set.
  var hasPaypalAvailable: Bool {return self._paypalAvailable != nil}
  /// Clears the value of `paypalAvailable`. Subsequent reads from it will return its default value.
  mutating func clearPaypalAvailable() {self._paypalAvailable = nil}

  var numberOfAvailableWeeks: Int32 {
    get {return _numberOfAvailableWeeks ?? 0}
    set {_numberOfAvailableWeeks = newValue}
  }
  /// Returns true if `numberOfAvailableWeeks` has been explicitly set.
  var hasNumberOfAvailableWeeks: Bool {return self._numberOfAvailableWeeks != nil}
  /// Clears the value of `numberOfAvailableWeeks`. Subsequent reads from it will return its default value.
  mutating func clearNumberOfAvailableWeeks() {self._numberOfAvailableWeeks = nil}

  var usageContext: String {
    get {return _usageContext ?? "start flow"}
    set {_usageContext = newValue}
  }
  /// Returns true if `usageContext` has been explicitly set.
  var hasUsageContext: Bool {return self._usageContext != nil}
  /// Clears the value of `usageContext`. Subsequent reads from it will return its default value.
  mutating func clearUsageContext() {self._usageContext = nil}

  var guestFlow: Bool {
    get {return _guestFlow ?? false}
    set {_guestFlow = newValue}
  }
  /// Returns true if `guestFlow` has been explicitly set.
  var hasGuestFlow: Bool {return self._guestFlow != nil}
  /// Clears the value of `guestFlow`. Subsequent reads from it will return its default value.
  mutating func clearGuestFlow() {self._guestFlow = nil}

  var flowStepDescription: String {
    get {return _flowStepDescription ?? String()}
    set {_flowStepDescription = newValue}
  }
  /// Returns true if `flowStepDescription` has been explicitly set.
  var hasFlowStepDescription: Bool {return self._flowStepDescription != nil}
  /// Clears the value of `flowStepDescription`. Subsequent reads from it will return its default value.
  mutating func clearFlowStepDescription() {self._flowStepDescription = nil}

  var pageName: String {
    get {return _pageName ?? String()}
    set {_pageName = newValue}
  }
  /// Returns true if `pageName` has been explicitly set.
  var hasPageName: Bool {return self._pageName != nil}
  /// Clears the value of `pageName`. Subsequent reads from it will return its default value.
  mutating func clearPageName() {self._pageName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PHONENUMBEREXISTS: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case verified // = 0
    case exists // = 1
    case doesnotexist // = 2

    init() {
      self = .verified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .verified
      case 1: self = .exists
      case 2: self = .doesnotexist
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .verified: return 0
      case .exists: return 1
      case .doesnotexist: return 2
      }
    }

  }

  init() {}

  fileprivate var _appointmentType: String? = nil
  fileprivate var _componentName: String? = nil
  fileprivate var _itemIndex: Int32? = nil
  fileprivate var _scenarioName: String? = nil
  fileprivate var _schemaVersion: String? = nil
  fileprivate var _phoneNumberExists: StartFlow.PHONENUMBEREXISTS? = nil
  fileprivate var _paypalAvailable: Int32? = nil
  fileprivate var _numberOfAvailableWeeks: Int32? = nil
  fileprivate var _usageContext: String? = nil
  fileprivate var _guestFlow: Bool? = nil
  fileprivate var _flowStepDescription: String? = nil
  fileprivate var _pageName: String? = nil
}

#if swift(>=4.2)

extension StartFlow.PHONENUMBEREXISTS: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension StartFlow: @unchecked Sendable {}
extension StartFlow.PHONENUMBEREXISTS: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension StartFlow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StartFlow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appointmentType"),
    2: .same(proto: "componentName"),
    3: .same(proto: "itemIndex"),
    4: .same(proto: "scenarioName"),
    5: .same(proto: "schemaVersion"),
    6: .same(proto: "phoneNumberExists"),
    7: .same(proto: "paypalAvailable"),
    8: .same(proto: "numberOfAvailableWeeks"),
    9: .same(proto: "usageContext"),
    10: .same(proto: "guestFlow"),
    11: .same(proto: "flowStepDescription"),
    12: .same(proto: "pageName"),
  ]

  public var isInitialized: Bool {
    if self._componentName == nil {return false}
    if self._scenarioName == nil {return false}
    if self._schemaVersion == nil {return false}
    if self._usageContext == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._appointmentType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._componentName) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._itemIndex) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._scenarioName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._schemaVersion) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._phoneNumberExists) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._paypalAvailable) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self._numberOfAvailableWeeks) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._usageContext) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self._guestFlow) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._flowStepDescription) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self._pageName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._appointmentType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._componentName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._itemIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._scenarioName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._schemaVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._phoneNumberExists {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._paypalAvailable {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._numberOfAvailableWeeks {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._usageContext {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._guestFlow {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._flowStepDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._pageName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StartFlow, rhs: StartFlow) -> Bool {
    if lhs._appointmentType != rhs._appointmentType {return false}
    if lhs._componentName != rhs._componentName {return false}
    if lhs._itemIndex != rhs._itemIndex {return false}
    if lhs._scenarioName != rhs._scenarioName {return false}
    if lhs._schemaVersion != rhs._schemaVersion {return false}
    if lhs._phoneNumberExists != rhs._phoneNumberExists {return false}
    if lhs._paypalAvailable != rhs._paypalAvailable {return false}
    if lhs._numberOfAvailableWeeks != rhs._numberOfAvailableWeeks {return false}
    if lhs._usageContext != rhs._usageContext {return false}
    if lhs._guestFlow != rhs._guestFlow {return false}
    if lhs._flowStepDescription != rhs._flowStepDescription {return false}
    if lhs._pageName != rhs._pageName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StartFlow.PHONENUMBEREXISTS: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "verified"),
    1: .same(proto: "exists"),
    2: .same(proto: "doesnotexist"),
  ]
}
